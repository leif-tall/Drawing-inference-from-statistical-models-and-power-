se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
library(tidyverse)
library(exscidata)
library(gt)
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
View(results)
View(results_40)
View(results_8)
View(m1)
View(results_40)
library(tidyverse)
library(exscidata)
library(gt)
library(tidyverse)
library(exscidata)
library(gt)
View(m1)
m1 <- lm(y ~ 1, data = samp1)
summary(m1)
print()
View(m1)
View(samp1)
plot(m1)
mean(y,data=samp1)
mean(samp1)
mean(samp1$y)
summary(m1)
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
View(m1)
View(samp1)
View(samp1)
View(results_40)
results <- bind_rows(results_8, results_40)
library(tidyverse)
library(exscidata)
library(gt)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
View(results)
View(results)
library(tidyverse)
library(exscidata)
library(gt)
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
library(tidyverse)
library(exscidata)
library(gt)
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
library(tidyverse)
library(exscidata)
library(gt)
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
library(tidyverse)
library(exscidata)
library(gt)
library(tidyverse)
library(exscidata)
library(gt)
# Example code for copy and paste
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
# Example code for copy and paste
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
View(m1)
m1 <- lm(y ~ 1, data = samp1)
summary(m1)
summary(m2)
View(results_40)
View(results_8)
View(m1)
set.seed(1)
population <- rnorm(1000000, mean = 10, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
m1 <- lm(y ~ 1, data = samp1)
summary(m1)
m2 <- lm(y ~ 1, data = samp2)
m2 <- lm(y ~ 1, data = samp2)
summary(m2)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
library(gglot)
library(tidyverse)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
library(tidyverse)
library(exscidata)
library(gt)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
summary(m1)
summary(m2)
View(results_40)
filter(pval)
View(results_40)
results_40 %>%
filter(pval>5.0) %>%
print()
results_40 %>%
filter(pval<5.0) %>%
print()
#| echo: true
results_40 %>%
filter(pval>5) %>%
print()
#| echo: true
results_40 %>%
filter(pval>0,05) %>%
print()
#| echo: true
results_40 %>%
filter(pval<0,05) %>%
print()
#| echo: true
results_40 %>%
filter(pval<0.05) %>%
print()
View(samp1)
#| echo: true
samp1 %>%
filter(pval<5) %>%
print()
View(samp1)
View(m1)
library(pwr)
effekt_størrelse <- 1.5
alfa-nivå <- 3
alfa_nivå <- 3
pwr.t.test(d=effekt_størrelse, sig.level = alfa_nivå, power = NULL, n = n, type = "two.sample")
n <- 40
pwr.t.test(d=effekt_størrelse, sig.level = alfa_nivå, power = NULL, n = n, type = "two.sample")
pwr.t.test(d=effekt_størrelse, sig.level = alfa_nivå, power = NULL, n = n, type = "two.sample")
alfa_nivå <- 3
pwr.t.test(d=effekt_størrelse, sig.level = 3, power = NULL, n = n, type = "two.sample")
# Definer variabler
effekt_storrelse <- 0.5
alfa_niva <- 0.05
n <- 50  # Antall observasjoner i hver gruppe
# Beregn styrken for t-test
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "two.sample")
library(pwr)
effekt_storrelse <- 1.5
alfa_nivå <- 3
n <- 40
pwr.t.test(d=effekt_størrelse, sig.level = alfa_nivå, power = NULL, n = n, type = "two.sample")
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "two.sample")
? pwr.t.test
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "two.sample")
? pwr.t.test
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(pwr)
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(tidyverse)
library(exscidata)
library(gt)
gt()
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 3.0
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(pwr)
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(pwr)
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 1.5
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(pwr)
effekt_storrelse <- 3
alfa_nivå <- 0.01
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 3
alfa_nivå <- 0.01
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
alfa_nivå <- 0.01
library(pwr)
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 8
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
effekt_storrelse <- 3
alfa_nivå <- 0.05
n <- 40
pwr.t.test(d = effekt_storrelse, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
? pwr.t.test
library(tidyverse)
library(exscidata)
library(gt)
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
# A two facets histogram can be created with ggplot2
results %>%
ggplot(aes(pval)) +
geom_histogram() +
facet_wrap(~ n)
# Count the proportion of tests below a certain p-value for each
results %>%
filter(pval < 0.05) %>%
group_by(n) %>%
summarise(sig_results = n()/1000)
# Using the pwr package
library(pwr)
pwr.t.test(n = 40, sig.level = 0.05, d = 1.5/3, type = "one.sample")
effect_size <- 0.5  # Cohen's d
alpha <- 0.05  # Significance level
sample_sizes <- c(8, 40)  # Different sample sizes
# Calculate the number of studies declaring significance for each sample size
for (n in sample_sizes) {
# Calculate power using the pwr.t.test function
power <- pwr.t.test(d = effect_size, sig.level = alpha, power = NULL, n = n)$power
# Calculate the number of studies
num_studies <- qbinom(1 - alpha, size = 1, prob = power)
# Output the result
cat("Sample size:", n, "- Number of studies declaring significance:", num_studies, "\n")
}
pwr.t.test(d = 1.5/3, sig.level = alfa_niva, power = NULL, n = n, type = "one.sample")
pwr.t.test(d = 1.5/3, sig.level = alfa_niva, power = NULL, type = "one.sample")
#effekt størrelse 1,5
effekt_storrelse <- 1.5/3
#effekt størrelse 1,5
effekt_storrelse <- 1.5/3
sig.level <- 0.05
pwr.t.test(d = 1.5/3, sig.level, power = NULL, type = "one.sample")
library(pwr)
pwr.t.test(d = 1.5/6.8, sig.level = 0.05, power = 0.8)
library(pwr)
pwr.t.test(d = 1.5/3.0, sig.level = 0.05, power = 0.8)
